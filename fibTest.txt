Start program
Begin processing
current Position is 0
found instr with code 4
string num is 1, next char is  
temp is 1 
Reg name is rax
Returning from getReg, the next char is )
instruction: irmovq	regA: -1	regB: 0	offset: 1
instruction: irmovq	regA: -1	regB: 0	offset: 1
current Position is 10
found instr with code 10
first char in processDest is f
returning from processDest next char is )
instruction: call	regA: -1	regB: -1	offset: 0	label: fib
instruction: call	regA: -1	regB: -1	offset: 0	label: fib
current Position is 19
about to add symbol with name fib
Symbol fib	pos: 19
new symbol name is fib
current Position is 19
found instr with code 3
Reg name is rdi
Returning from getReg, the next char is  
Reg name is r10
Returning from getReg, the next char is )
instruction: rrmovq	regA: 7	regB: 10	offset: 0
instruction: rrmovq	regA: 7	regB: 10	offset: 0
current Position is 21
found instr with code 7
Reg name is r10
Returning from getReg, the next char is  
Reg name is r10
Returning from getReg, the next char is )
instruction: OP	type: 2	regA: 10	regB: 10	offset: 0
instruction: OP	type: 2	regA: 10	regB: 10	offset: 0
current Position is 23
found instr with code 8
first char in processDest is c
returning from processDest next char is )
instruction: JUMP	type: 6	regA: -1	regB: -1	offset: 0	label: continue
instruction: JUMP	type: 6	regA: -1	regB: -1	offset: 0	label: continue
current Position is 32
found instr with code 3
Reg name is rdi
Returning from getReg, the next char is  
Reg name is rax
Returning from getReg, the next char is )
instruction: rrmovq	regA: 7	regB: 0	offset: 0
instruction: rrmovq	regA: 7	regB: 0	offset: 0
current Position is 34
found instr with code 8
first char in processDest is d
returning from processDest next char is )
instruction: JUMP	type: 0	regA: -1	regB: -1	offset: 0	label: done
instruction: JUMP	type: 0	regA: -1	regB: -1	offset: 0	label: done
current Position is 43
found instr with code 4
string num is 1, next char is  
temp is 1 
Reg name is r11
Returning from getReg, the next char is )
instruction: irmovq	regA: -1	regB: 11	offset: 1
instruction: irmovq	regA: -1	regB: 11	offset: 1
current Position is 53
found instr with code 7
Reg name is r11
Returning from getReg, the next char is  
Reg name is r10
Returning from getReg, the next char is )
instruction: OP	type: 1	regA: 11	regB: 10	offset: 0
instruction: OP	type: 1	regA: 11	regB: 10	offset: 0
current Position is 55
found instr with code 8
first char in processDest is c
returning from processDest next char is )
instruction: JUMP	type: 4	regA: -1	regB: -1	offset: 0	label: continue
instruction: JUMP	type: 4	regA: -1	regB: -1	offset: 0	label: continue
current Position is 64
found instr with code 3
Reg name is rdi
Returning from getReg, the next char is  
Reg name is rax
Returning from getReg, the next char is )
instruction: rrmovq	regA: 7	regB: 0	offset: 0
instruction: rrmovq	regA: 7	regB: 0	offset: 0
current Position is 66
found instr with code 8
first char in processDest is d
returning from processDest next char is )
instruction: JUMP	type: 0	regA: -1	regB: -1	offset: 0	label: done
instruction: JUMP	type: 0	regA: -1	regB: -1	offset: 0	label: done
current Position is 75
about to add symbol with name continue
Symbol continue	pos: 75
new symbol name is continue
current Position is 75
found instr with code 4
string num is 1, next char is  
temp is 1 
Reg name is r11
Returning from getReg, the next char is )
instruction: irmovq	regA: -1	regB: 11	offset: 1
instruction: irmovq	regA: -1	regB: 11	offset: 1
current Position is 85
found instr with code 7
Reg name is r11
Returning from getReg, the next char is  
Reg name is rdi
Returning from getReg, the next char is )
instruction: OP	type: 1	regA: 11	regB: 7	offset: 0
instruction: OP	type: 1	regA: 11	regB: 7	offset: 0
current Position is 87
found instr with code 10
first char in processDest is f
returning from processDest next char is )
instruction: call	regA: -1	regB: -1	offset: 0	label: fib
instruction: call	regA: -1	regB: -1	offset: 0	label: fib
current Position is 96
found instr with code 3
Reg name is rax
Returning from getReg, the next char is  
Reg name is r10
Returning from getReg, the next char is )
instruction: rrmovq	regA: 0	regB: 10	offset: 0
instruction: rrmovq	regA: 0	regB: 10	offset: 0
current Position is 98
found instr with code 7
Reg name is r11
Returning from getReg, the next char is  
Reg name is rdi
Returning from getReg, the next char is )
instruction: OP	type: 1	regA: 11	regB: 7	offset: 0
instruction: OP	type: 1	regA: 11	regB: 7	offset: 0
current Position is 100
found instr with code 10
first char in processDest is f
returning from processDest next char is )
instruction: call	regA: -1	regB: -1	offset: 0	label: fib
instruction: call	regA: -1	regB: -1	offset: 0	label: fib
current Position is 109
found instr with code 7
Reg name is r10
Returning from getReg, the next char is  
Reg name is rax
Returning from getReg, the next char is )
instruction: OP	type: 0	regA: 10	regB: 0	offset: 0
instruction: OP	type: 0	regA: 10	regB: 0	offset: 0
current Position is 111
about to add symbol with name done
Symbol done	pos: 111
new symbol name is done
current Position is 111
found instr with code 11
instruction: ret	regA: -1	regB: -1	offset: 0
instruction: ret	regA: -1	regB: -1	offset: 0
finished firstPassParser
(
on instruction number 1
( 0 .  48 )
( 1 . 240 )
( 2 . 1 )
( 3 . 0 )
( 4 . 0 )
( 5 . 0 )
( 6 . 0 )
( 7 . 0 )
( 8 . 0 )
( 9 . 0 )
on instruction number 2
( 10 .  128 )
( 11 . 19 )
( 12 . 0 )
( 13 . 0 )
( 14 . 0 )
( 15 . 0 )
( 16 . 0 )
( 17 . 0 )
( 18 . 0 )
on instruction number 3
( 19 .  32 )
( 20 . 122 )
on instruction number 4
( 21 .  98 )
( 22 . 170 )
on instruction number 5
( 23 .  118 )
( 24 . 75 )
( 25 . 0 )
( 26 . 0 )
( 27 . 0 )
( 28 . 0 )
( 29 . 0 )
( 30 . 0 )
( 31 . 0 )
on instruction number 6
( 32 .  32 )
( 33 . 112 )
on instruction number 7
( 34 .  112 )
( 35 . 111 )
( 36 . 0 )
( 37 . 0 )
( 38 . 0 )
( 39 . 0 )
( 40 . 0 )
( 41 . 0 )
( 42 . 0 )
on instruction number 8
( 43 .  48 )
( 44 . 251 )
( 45 . 1 )
( 46 . 0 )
( 47 . 0 )
( 48 . 0 )
( 49 . 0 )
( 50 . 0 )
( 51 . 0 )
( 52 . 0 )
on instruction number 9
( 53 .  97 )
( 54 . 186 )
on instruction number 10
( 55 .  116 )
( 56 . 75 )
( 57 . 0 )
( 58 . 0 )
( 59 . 0 )
( 60 . 0 )
( 61 . 0 )
( 62 . 0 )
( 63 . 0 )
on instruction number 11
( 64 .  32 )
( 65 . 112 )
on instruction number 12
( 66 .  112 )
( 67 . 111 )
( 68 . 0 )
( 69 . 0 )
( 70 . 0 )
( 71 . 0 )
( 72 . 0 )
( 73 . 0 )
( 74 . 0 )
on instruction number 13
( 75 .  48 )
( 76 . 251 )
( 77 . 1 )
( 78 . 0 )
( 79 . 0 )
( 80 . 0 )
( 81 . 0 )
( 82 . 0 )
( 83 . 0 )
( 84 . 0 )
on instruction number 14
( 85 .  97 )
( 86 . 183 )
on instruction number 15
( 87 .  128 )
( 88 . 19 )
( 89 . 0 )
( 90 . 0 )
( 91 . 0 )
( 92 . 0 )
( 93 . 0 )
( 94 . 0 )
( 95 . 0 )
on instruction number 16
( 96 .  32 )
( 97 . 10 )
on instruction number 17
( 98 .  97 )
( 99 . 183 )
on instruction number 18
( 100 .  128 )
( 101 . 19 )
( 102 . 0 )
( 103 . 0 )
( 104 . 0 )
( 105 . 0 )
( 106 . 0 )
( 107 . 0 )
( 108 . 0 )
on instruction number 19
( 109 .  96 )
( 110 . 160 )
on instruction number 20
( 111  . 144  )
)
